{"version":3,"sources":["components/brandHeader.jsx","components/QuizConsole.jsx","App.js","serviceWorker.js","index.js","image/hackgridLogo.png","image/Logo.png","image/quiz.png"],"names":["BrandHeader","state","react_default","a","createElement","className","id","src","Logo","alt","this","props","teamName","style","fontSize","Head","Component","QuizConsole","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","liveQuestionSetter","setState","loading","firebaseRef","on","snapshot","exists","liveQuestion","val","currentQuestion","firebase","ref","concat","once","counter","globalCounter","afterAns","database","child","set","time","perc","mytimer","setInterval","killTimer","timer","percentage","clearInterval","console","log","question","correctAnswer","optiona","optionb","optionc","optiond","answer","score","killtime","liveQues","option","optionACounter","optionBCounter","optionCCounter","optionDCounter","firebaseQuestionFind2","swi","questionToBeDisplayed","answerToBeDisplayed","optionA","optionB","optionC","optionD","q","event","_this2","target","userCounterCheck","actualAns","optionUpdate","startTimeStamp","timeStamp","currentTime","Date","getTime","timeElapsed","Math","round","newScore","_this3","dist_default","text","dx","dy","background","backgroundPadding","strokeWidth","styles","root","path","stroke","strokeLinecap","transition","trail","fill","wait","onClick","check","bind","brandHeader","participantName","justifyContent","renderQuestion","renderTimer","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebaseUser","firebaseQuestions","App","onPressRegisterButton","preventDefault","document","getElementById","value","password","registered","finPass","pass","loggedIn","loadingSignUp","components_QuizConsole","user","questions","onSubmit","autoComplete","register","userCheck","keys","includes","type","name","placeholder","onChange","passwordOnChange","required","color","react_loader_spinner_default","height","width","teamNameOnChange","loginOrRegister","renderRegisterOrQuiz","spinner","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uRA0BeA,6MApBXC,MAAQ,2EAEJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,OAAOC,IAAKC,IAAMC,IAAI,OAAOJ,UAAU,YAC/CH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,eAAeD,UAAU,QAC/BH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,YAAN,eAA8BI,KAAKC,MAAMC,YAG7CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,KAAGS,MAAO,CAACC,SAAU,KAArB,qBACAZ,EAAAC,EAAAC,cAAA,OAAKG,IAAKQ,IAAMN,IAAI,WAAWH,GAAG,aAClCJ,EAAAC,EAAAC,cAAA,KAAGS,MAAO,CAACC,SAAU,KAArB,sCAdYE,8BCkVXC,cA9Ub,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMC,KAqBRa,kBAAoB,WAClBN,EAAKO,qBAKLP,EAAKQ,SAAS,CAACC,SAAS,IACxBT,EAAKP,MAAMiB,YAAYC,GAAG,QAAS,SAACC,GAElC,GAAIA,EAASC,SAAU,CAgBrB,GAdAb,EAAKQ,SAAS,CAACM,aAAcF,EAASG,MAAMD,eAG5Cd,EAAKgB,kBAIkBC,aAAoBC,IAApB,WAAAC,OAAmCnB,EAAKP,MAAMC,WACpD0B,KAAK,QAAS,SAACR,GAC/BZ,EAAKQ,SAAS,CAAEa,QAAUT,EAASG,MAAMM,YAKL,IAAjCT,EAASG,MAAMO,eAA8C,IAAvBtB,EAAKjB,MAAMsC,QACpDrB,EAAKQ,SAAS,CAACe,UAAU,IACGvB,EAAKP,MAAM+B,SAASN,IAApB,WAAAC,OAAmCnB,EAAKP,MAAMC,WACpD+B,MAAM,WAAWC,IAAI,GAG5C,GAAwB,IAArB1B,EAAKjB,MAAMsC,QAEZ,IAAIM,EAAK,GACLC,EAAK,EAGbC,EAAUC,YAAY,WACxBH,GAAU,GACVC,GAAM,mBACE,KACRG,IACA/B,EAAKQ,SAAS,CAACa,QAAS,KAErBM,EAAK,KACRA,EAAO,IAAIA,GACX3B,EAAKQ,SAAS,CAACwB,MAAOL,EACpBM,WAAYL,KACb,KAGDG,EAAU,WACZG,cAAcL,IAIR7B,EAAKQ,SAAS,CAACC,SAAS,OAILT,EAAKP,MAAM+B,SAASN,IAApB,WAAAC,OAAmCnB,EAAKP,MAAMC,WAC9C0B,KAAK,QAAS,SAACR,GAEN,IADCA,EAASG,MAAMM,UAEtCrB,EAAKQ,SAAS,CAACe,UAAU,EACzBF,QAAS,IACTc,QAAQC,IAAIpC,EAAKjB,MAAMsC,aArFjCrB,EAAKjB,MAAQ,CACXkD,WAAY,EACZD,MAAO,KACPlB,aAAc,EACduB,SAAU,GACVC,cAAe,GACfC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,OAAQ,GACRtB,QAAS,EACTuB,MAAO,EACPnC,SAAS,EACToC,UAAU,EACVtB,SAAW,SAlBIvB,4EA+FR8C,EAAUC,GACrB,IAEIC,EACAC,EACAC,EACAC,EALAC,EAAwB5D,KAAKC,MAAM+B,SAASN,IAApB,aAAAC,OAAqC2B,IAMjEM,EAAsBhC,KAAK,QAAS,SAACR,GACjCoC,EAAiBpC,EAASG,MAAMiC,eAChCC,EAAiBrC,EAASG,MAAMkC,eAChCC,EAAiBtC,EAASG,MAAMmC,eAChCC,EAAiBvC,EAASG,MAAMoC,iBAGrB,MAAXJ,IACAC,GAAkC,EAClCI,EAAsB3B,MAAM,kBAAkBC,IAAIsB,IAGvC,MAAXD,IACAE,GAAkC,EAClCG,EAAsB3B,MAAM,kBAAkBC,IAAIuB,IAGvC,MAAXF,IACAG,GAAkC,EAClCE,EAAsB3B,MAAM,kBAAkBC,IAAIwB,IAGvC,MAAXH,IACAI,GAAkC,EAClCC,EAAsB3B,MAAM,kBAAkBC,IAAIyB,qCAO/CE,8CAQP,IAEIC,EACAC,EACAC,EAAQC,EAAQC,EAAQC,EAJDnE,KAAKC,MAAM+B,SAASN,IAApB,aAAAC,OAAqC3B,KAAKT,MAAM+B,eAKtDM,KAAK,QAAS,SAACR,GAChC0C,EAAwB1C,EAASG,MAAM6C,EACvCL,EAAsB3C,EAASG,MAAM9B,EACrCuE,EAAU5C,EAASG,MAAMyC,QACzBC,EAAU7C,EAASG,MAAM0C,QACzBC,EAAU9C,EAASG,MAAM2C,QACzBC,EAAU/C,EAASG,MAAM4C,UAI7BnE,KAAKgB,SAAS,CACZ6B,SAAUiB,EACVhB,cAAeiB,EACfhB,QAASiB,EACThB,QAASiB,EACThB,QAASiB,EACThB,QAASiB,kCAKJE,GAAO,IAAAC,EAAAtE,KAERuD,EAAOc,EAAME,OAAO3E,GACxBI,KAAKgB,SAAS,CACZmC,OAAQI,IAGRvD,KAAKC,MAAMiB,YAAYU,KAAK,QAAS,SAACR,GAClC,IAIIgC,EACAoB,EALAC,EAAYH,EAAK/E,MAAMuD,cAsB3B,GArBAwB,EAAKtD,SAAS,CACZM,aAAcF,EAASG,MAAMD,eAIRgD,EAAKrE,MAAM+B,SAASN,IAApB,WAAAC,OAAmC2C,EAAKrE,MAAMC,WACpD0B,KAAK,QAAS,SAACR,GAC5BgC,EAAQhC,EAASG,MAAM6B,MACvBoB,EAAmBpD,EAASG,MAAMM,UAGb,IAArB2C,GACAF,EAAKrE,MAAMiB,YAAYU,KAAK,QAAS,SAACR,GAClCkD,EAAKtD,SAAS,CAACM,aAAcF,EAASG,MAAMD,eAC5CgD,EAAKI,aAAaJ,EAAK/E,MAAM+B,aAAciC,KAO/CkB,IAAclB,GAA+B,IAArBiB,EAAwB,CAEhD,IAAIG,EAAiBvD,EAASG,MAAMqD,UAChCC,GAAc,IAAIC,MAAOC,UACzBC,EAAeC,KAAKC,OAAOL,EAAYF,GAAgB,KACvDQ,EAAW/B,GAAS,GAAG4B,GACDvD,aAAoBC,IAApB,WAAAC,OAAmC2C,EAAKrE,MAAMC,WACpD+B,MAAM,SAASC,IAAIiD,GAId1D,aAAoBC,IAApB,WAAAC,OAAmC2C,EAAKrE,MAAMC,WACpD+B,MAAM,WAAWC,IAAI,kDAK9B,IAAAkD,EAAApF,KACpBA,KAAKC,MAAMiB,YAAYU,KAAK,QAAS,SAACR,GACpC,IAAIkC,EAAWlC,EAASG,MAAMD,aAC9B8D,EAAKpE,SAAS,CAAEM,aAAcgC,IAC9B8B,EAAK5D,0DAIP,OAAwB,IAArBxB,KAAKT,MAAMsC,QAEdrC,EAAAC,EAAAC,cAAC2F,EAAA5F,EAAD,CACYE,UAAU,cACV8C,WAAYzC,KAAKT,MAAMkD,WACvB6C,KACE9F,EAAAC,EAAAC,cAAA,SACE6F,IAA+B,GAC/BC,GAA8B,GAFhC,MAGOxF,KAAKT,MAAMiD,OAGpBiD,WAAW,OACXC,kBAAmB,EACnBC,YAAa,EACbC,OAAQ,CAENC,KAAM,GAENC,KAAM,CAEJC,OAAM,qBAAApE,OAAuB,EAAvB,KAENqE,cAAe,OAEfC,WAAY,kCAGdC,MAAO,CAELH,OAAQ,WAGVT,KAAM,CAEJa,KAAM,OAEN/F,SAAU,QAGZqF,WAAY,CACVU,KAAM,YAKN3G,EAAAC,EAAAC,cAAA,qDAGhB,OAAwB,IAArBM,KAAKT,MAAMsC,QAEZrC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UACXC,IAAKuG,IAAMrG,IAAI,eAIjBP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YACNK,KAAKT,MAAMsD,UAEdrD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUD,UAAU,uBAC5BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACfH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,IAAID,UAAU,2BAA2B0G,QAASrG,KAAKsG,MAAMC,KAAKvG,OAAQA,KAAKT,MAAMwD,SAC/FvD,EAAAC,EAAAC,cAAA,OAAKE,GAAG,IAAID,UAAU,2BAA2B0G,QAASrG,KAAKsG,MAAMC,KAAKvG,OAAQA,KAAKT,MAAMyD,UAErGxD,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDAAiDC,GAAG,WACjEJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,IAAID,UAAU,eAAe0G,QAASrG,KAAKsG,MAAMC,KAAKvG,OAAQA,KAAKT,MAAM0D,SACnFzD,EAAAC,EAAAC,cAAA,OAAKE,GAAG,IAAID,UAAU,eAAe0G,QAASrG,KAAKsG,MAAMC,KAAKvG,OAAQA,KAAKT,MAAM2D,6CAWrF,OACE1D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8G,EAAD,CACEtG,SAAUF,KAAKC,MAAMC,SACrBuG,gBAAiBzG,KAAKC,MAAMwG,kBAE9BjH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,qBACVQ,MAAO,CAAEuG,eAAgB,WAF3B,aAIa1G,KAAKT,MAAM+B,aAJxB,WAOF9B,EAAAC,EAAAC,cAAA,WACCM,KAAK2G,iBACNnH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZK,KAAK4G,yBApUMtG,oBCQ1BmB,gBARa,CACXoF,OAAQ,0CACRC,WAAY,0BACZC,YAAa,iCACbC,UAAW,UACXC,cAAe,sBACfC,kBAAmB,iBAIrB,IAAMC,EAAe1F,aAAoBC,IAApB,WACfR,EAAcO,aAAoBC,MAClCM,EAAWP,aACX2F,EAAoB3F,aAAoBC,IAApB,YA6JX2F,cAvJb,SAAAA,EAAYpH,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAqH,IACjB7G,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAA4G,GAAAxG,KAAAb,KAAMC,KA6DRqH,sBAAsB,SAACjD,GAMrB,GALAA,EAAMkD,iBACN/G,EAAKQ,SAAS,CACZd,SAAUsH,SAASC,eAAe,YAAYC,MAC9CC,SAAUH,SAASC,eAAe,YAAYC,SAErB,IAAxBlH,EAAKjB,MAAMqI,WAEZT,EAAalF,MAAMzB,EAAKjB,MAAMW,UAAUgC,IAAI,CAC1CyF,SAAUnH,EAAKjB,MAAMoI,SACrBvE,MAAO,EACPvB,QAAS,IAEXrB,EAAKQ,SAAS,CAAC4G,YAAY,QAEzB,CACF,IAAIC,EAAUrH,EAAKjB,MAAMoI,SACrBG,EAAK,GACerG,aAAoBC,IAApB,WAAAC,OAAmCnB,EAAKjB,MAAMW,WACtD0B,KAAK,QAAS,SAACR,GAC/B0G,EAAM1G,EAASG,MAAMoG,SAElBE,IAAUC,GAEXtH,EAAKQ,SAAS,CACZ+G,UAAU,QAlFhBvH,EAAKjB,MAAQ,CACXyI,eAAe,EACfJ,YAAY,EACZG,UAAU,EACV7H,SAAU,GACVyH,SAAU,GACVlB,gBAAiB,IAXFjG,sFAmBjB,OAAGR,KAAKT,MAAMwI,SAEZvI,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAACuI,EAAD,CAAa/H,SAAUF,KAAKT,MAAMW,SAAUuG,gBAAiBzG,KAAKT,MAAMkH,gBAAiBzE,SAAUA,EAAUkG,KAAMf,EAAcjG,YAAaA,EAAaiH,UAAWf,KAK5K5H,EAAAC,EAAAC,cAAA,QAAOE,GAAG,UAAUD,UAAW,WAAWyI,SAAUpI,KAAKsH,sBAAsBf,KAAKvG,MAAOqI,aAAa,OACxG7I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAMC,IAAI,OAAOH,GAAG,YAC9BJ,EAAAC,EAAAC,cAAA,mBAEGM,KAAKsI,qDAKGjE,GAAM,IAAAC,EAAAtE,KACrBA,KAAKgB,SAAS,CAAEd,SAAUmE,EAAME,OAAOmD,MACvBM,eAAe,IAC/Bb,EAAavF,KAAK,QAAS,SAACR,GAC1B,IACMmH,EADQ9H,OAAO+H,KAAKpH,EAASG,OACTkH,SAASnE,EAAK/E,MAAMW,UAC5CoE,EAAKtD,SAAS,CAACgH,eAAe,IAC3BO,EACJjE,EAAKtD,SAAS,CAAC4G,YAAY,IAE3BtD,EAAKtD,SAAS,CAAC4G,YAAY,sDAKRvD,GACtBrE,KAAKgB,SAAS,CAACyF,gBAAiBpC,EAAME,OAAOmD,iDAG9BrD,GAEfrE,KAAKgB,SAAS,CAAE2G,SAAUH,SAASC,eAAe,YAAYC,kDAwC9D,OAA2B,IAAxB1H,KAAKT,MAAMqI,WAEZpI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOgJ,KAAK,WAAW9I,GAAG,WAAWD,UAAU,GAAGgJ,KAAK,QAAQC,YAAY,WAAWlB,MAAO1H,KAAKT,MAAMoI,SAAUkB,SAAU7I,KAAK8I,iBAAiBvC,KAAKvG,MAAO+I,UAAQ,IACtKvJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBAAkBC,GAAG,UAAU8I,KAAK,SAAShB,MAAM,cAKpElI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOgJ,KAAK,WAAW9I,GAAG,WAAWD,UAAU,GAAGgJ,KAAK,QAAQC,YAAY,WAAWlB,MAAO1H,KAAKT,MAAMoI,SAAUkB,SAAU7I,KAAK8I,iBAAiBvC,KAAKvG,MAAO+I,UAAQ,IACtKvJ,EAAAC,EAAAC,cAAA,KAAGS,MAAO,CAAC6I,MAAO,SAAlB,cACAxJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBAAkBC,GAAG,UAAU8I,KAAK,SAAShB,MAAM,8CAMtE,GAAG1H,KAAKT,MAAMyI,cACd,OACExI,EAAAC,EAAAC,cAACuJ,EAAAxJ,EAAD,CACGiJ,KAAK,WACLM,MAAM,UACNE,OAAO,KACPC,MAAM,0CAMX,OACE3J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,SAAOgJ,KAAK,OAAO9I,GAAG,WAAWD,UAAU,GAAGgJ,KAAK,QAAQC,YAAY,YAAYlB,MAAO1H,KAAKT,MAAMW,SAAW,GAAImI,aAAa,MAAMQ,SAAU7I,KAAKoJ,iBAAiB7C,KAAKvG,MAAO+I,UAAQ,IAC1L/I,KAAKqJ,oDAMR,OACE7J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdK,KAAKsJ,uBACZ9J,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SAASD,UAAU,eAAeK,KAAKuJ,mBAjJ7BjJ,oBCdEkJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtK,EAAAC,EAAAC,cAACqK,EAAD,MAASvC,SAASC,eAAe,SD0H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.1a16ed86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Logo from '../image/Logo.png';\nimport Head from '../image/hackgridLogo.png'\n \n\nclass BrandHeader extends Component {\n    state = {  }\n    render() { \n        return ( \n            <div className=\"brand\">\n            <div className=\"navBar\">\n              <img id=\"Logo\" src={Logo} alt=\"logo\" className=\"navLogo\"/>\n              <div id=\"playerDetail\" className=\"navs\">\n                <p id=\"teamName\">Team Name:  {this.props.teamName}</p>\n              </div>\n            </div>\n            <div className=\"headerText\">\n              <p style={{fontSize: 20}}>Hello! welcome to</p>\n              <img src={Head} alt=\"HackGrid\" id=\"headLogo\"/>\n              <p style={{fontSize: 17}}>By Apple Developers Group</p>\n            </div>\n          </div>\n         );\n    }\n}\n\nexport default BrandHeader;\n","import React, { Component } from \"react\";\nimport CircularProgressbar from \"react-circular-progressbar\";\nimport * as firebase from \"firebase\";\nimport BrandHeader from \"./brandHeader\";\nimport wait from '../image/quiz.png'\n\nconst needDominantBaselineFix = true;\n\nclass QuizConsole extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      percentage: 0,\n      timer: \"15\",\n      liveQuestion: 0,\n      question: \"\",\n      correctAnswer: \"\",\n      optiona: \"\",\n      optionb: \"\",\n      optionc: \"\",\n      optiond: \"\",\n      answer: \"\",\n      counter: 1,\n      score: 0,\n      loading: false,\n      killtime: false,\n      afterAns : 'false'\n    };\n  }\n\n  componentDidMount = () => {\n    this.liveQuestionSetter();\n\n    \n    \n    //Detecting change in liveQuestion variable in real time database\n    this.setState({loading: true})\n    this.props.firebaseRef.on(\"value\", (snapshot) =>{\n     \n      if (snapshot.exists()) {\n\n        this.setState({liveQuestion: snapshot.val().liveQuestion})\n      \n\n        this.currentQuestion();\n\n        //This is for enabling quiz page when new question arrives\n        \n        let firebaseUserInfo = firebase.database().ref(`players/${this.props.teamName}`);\n        firebaseUserInfo.once(\"value\", (snapshot)=> {\n         this.setState({ counter : snapshot.val().counter})\n        });\n\n        \n\n        if (snapshot.val().globalCounter === 1 && this.state.counter === 2) {\n         this.setState({afterAns: false})\n          let firebaseResetCounter = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseResetCounter.child(\"counter\").set(0);\n        }\n\n        if(this.state.counter===0)\n        {\n          var time=15;\n          var perc=0;\n  \n  \n  var mytimer = setInterval(()=>{\n    time=time-1;\n    perc+=6.66666666666666666;\n    if(perc>99){\n    killTimer();\n    this.setState({counter: 2})\n    }\n    if(time<10)\n    time = '0'+time;\n    this.setState({timer: time,\n      percentage: perc})\n  }, 1000);\n\n\nvar killTimer=()=>{\n  clearInterval(mytimer)\n}\n        }\n\n        this.setState({loading: false,})\n          \n      }\n    });\n    let firebaseUserInfo = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseUserInfo.once('value', (snapshot)=> {\n              let userCounterCheck = snapshot.val().counter;\n              if(userCounterCheck===2){\n              this.setState({afterAns: true,\n              counter: 2})\n              console.log(this.state.counter)}\n          })\n  };\n   \n\n\n//function to increase option selected count\noptionUpdate(liveQues, option) {\n  let firebaseQuestionFind2 = this.props.database.ref(`question/q${liveQues}`);\n\n  let optionACounter;\n  let optionBCounter;\n  let optionCCounter;\n  let optionDCounter;\n  firebaseQuestionFind2.once('value', (snapshot)=> {\n      optionACounter = snapshot.val().optionACounter;\n      optionBCounter = snapshot.val().optionBCounter;\n      optionCCounter = snapshot.val().optionCCounter;\n      optionDCounter = snapshot.val().optionDCounter;\n  })\n\n  if (option === 'a') {\n      optionACounter = optionACounter + 1;\n      firebaseQuestionFind2.child('optionACounter').set(optionACounter);\n  }\n\n  if (option === 'b') {\n      optionBCounter = optionBCounter + 1;\n      firebaseQuestionFind2.child('optionBCounter').set(optionBCounter);\n  }\n\n  if (option === 'c') {\n      optionCCounter = optionCCounter + 1;\n      firebaseQuestionFind2.child('optionCCounter').set(optionCCounter);\n  }\n\n  if (option === 'd') {\n      optionDCounter = optionDCounter + 1;\n      firebaseQuestionFind2.child('optionDCounter').set(optionDCounter);\n  }\n}\n\n\n\n\nhitTimer(swi){\n  \n \n};\n\n//function to find the question string for the live question\n currentQuestion() {\n\n  let firebaseQuestionFind = this.props.database.ref(`question/q${this.state.liveQuestion}`);\n\n  let questionToBeDisplayed;\n  let answerToBeDisplayed;\n  let optionA,optionB,optionC,optionD;\n  firebaseQuestionFind.once('value', (snapshot) =>{\n      questionToBeDisplayed = snapshot.val().q;\n      answerToBeDisplayed = snapshot.val().a;\n      optionA = snapshot.val().optionA;\n      optionB = snapshot.val().optionB;\n      optionC = snapshot.val().optionC;\n      optionD = snapshot.val().optionD;\n      \n  });\n\n  this.setState({\n    question: questionToBeDisplayed,\n    correctAnswer: answerToBeDisplayed,\n    optiona: optionA,\n    optionb: optionB,\n    optionc: optionC,\n    optiond: optionD,\n\n  })\n}\n\n   check(event) {\n\n    let option=event.target.id;\n    this.setState({\n      answer: option,\n    })\n      //correcting the user's option\n      this.props.firebaseRef.once('value', (snapshot) =>{\n          let actualAns = this.state.correctAnswer;\n          this.setState({\n            liveQuestion: snapshot.val().liveQuestion\n          })\n          let score;\n          let userCounterCheck;\n          let firebaseUserInfo = this.props.database.ref(`players/${this.props.teamName}`);\n          firebaseUserInfo.once('value', (snapshot)=> {\n              score = snapshot.val().score;\n              userCounterCheck = snapshot.val().counter;\n          })\n  \n          if (userCounterCheck !== 2) {\n              this.props.firebaseRef.once('value', (snapshot)=> {\n                  this.setState({liveQuestion: snapshot.val().liveQuestion})\n                  this.optionUpdate(this.state.liveQuestion, option);\n              })\n\n              \n          }\n          \n  \n          if (actualAns === option && userCounterCheck !== 2) {\n              \n              let startTimeStamp = snapshot.val().timeStamp;\n              let currentTime = new Date().getTime();\n              let timeElapsed =  Math.round((currentTime-startTimeStamp)/1000);\n              let newScore = score + (50-timeElapsed);\n              let firebaseChangeScore = firebase.database().ref(`players/${this.props.teamName}`);\n              firebaseChangeScore.child(\"score\").set(newScore);\n          }\n  \n          \n          let firebaseChangeCounter2 = firebase.database().ref(`players/${this.props.teamName}`);\n          firebaseChangeCounter2.child('counter').set(2);\n      })\n  }\n\n  //Onload function to display current live question\n   liveQuestionSetter() {\n    this.props.firebaseRef.once(\"value\", (snapshot)=> {\n      let liveQues = snapshot.val().liveQuestion;\n      this.setState({ liveQuestion: liveQues});\n      this.currentQuestion();\n    });\n  }\n  renderTimer(){\n    if(this.state.counter!==2)\n    return(\n    <CircularProgressbar\n                className=\"timerCircle\"\n                percentage={this.state.percentage}\n                text={\n                  <tspan\n                    dx={needDominantBaselineFix ? -25 : 0}\n                    dy={needDominantBaselineFix ? +6 : 0}>\n                     00:{this.state.timer}\n                   </tspan>\n                }\n                background=\"true\"\n                backgroundPadding={0}\n                strokeWidth={5}\n                styles={{\n                  // Customize the root svg element\n                  root: {},\n                  // Customize the path, i.e. the \"completed progress\"\n                  path: {\n                    // Path color\n                    stroke: `rgba(250, 0, 250, ${100 / 100})`,\n                    // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n                    strokeLinecap: \"butt\",\n                    // Customize transition animation\n                    transition: \"stroke-dashoffset 0.5s ease 0s\"\n                  },\n                  // Customize the circle behind the path, i.e. the \"total progress\"\n                  trail: {\n                    // Trail color\n                    stroke: \"#d6d6d6\"\n                  },\n                  // Customize the text\n                  text: {\n                    // Text color\n                    fill: \"#34c\",\n                    // Text size\n                    fontSize: \"20px\"\n                  },\n                  // Customize background - only used when the `background` prop is true\n                  background: {\n                    fill: \"white\"\n                  }\n                }}\n              />)\n\n             return(<div></div>) \n  }\n  renderQuestion(){\n    if(this.state.counter===2)\n    return(\n      <div><img id=\"waitImg\"\n        src={wait} alt=\"namilehai\"/></div>\n    )\n    \n    return(\n      <div>\n      <p className=\"Question\">\n            {this.state.question}\n          </p>\n          <br />\n          <div id=\"options\" className=\"Options text-center\">\n          <div className=\"row container optionGrp justify-content-center \">\n          <div id=\"a\" className=\"tag col-lg-5 text-center\" onClick={this.check.bind(this)}>{this.state.optiona}</div>\n        <div id=\"b\" className=\"tag col-lg-5 text-center\" onClick={this.check.bind(this)}>{this.state.optionb}</div>\n          </div>\n<br/>\n        <div className=\"row container optionGrp justify-content-center\" id=\"options\">\n          <div id=\"c\" className=\"tag col-lg-5\" onClick={this.check.bind(this)}>{this.state.optionc}</div>\n        <div id=\"d\" className=\"tag col-lg-5\" onClick={this.check.bind(this)}>{this.state.optiond}</div>\n          </div>\n          \n          </div>\n          </div>\n    )\n  }\n\n \n\n  render() {\n    return (\n      <div>\n        <BrandHeader\n          teamName={this.props.teamName}\n          participantName={this.props.participantName}\n        />\n        <div className=\"QuestionPage container\">\n          <div className=\"text-centre justify-content-center row\">\n            <p\n              className=\"questionNumber tag\"\n              style={{ justifyContent: \"center\" }}\n            >\n              Quesetion {this.state.liveQuestion} of 10\n            </p>\n          </div>\n          <br />\n          {this.renderQuestion()}\n          <br />\n          <div className=\"row\">\n            <div className=\"col-sm-5\" />\n            <div className=\"timer col-sm-4\">\n              {this.renderTimer()}\n            </div>\n\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuizConsole;\n","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport Loader from 'react-loader-spinner'\nimport QuizConsole from './components/QuizConsole';\nimport Logo from './image/hackgridLogo.png';\nimport './App.css';\n\n\nvar config = {\n  apiKey: \"AIzaSyBPLVDzn-VHltDnx-dL1e_M_cPIQQqr8P4\",\n  authDomain: \"adgquiz.firebaseapp.com\",\n  databaseURL: \"https://adgquiz.firebaseio.com\",\n  projectId: \"adgquiz\",\n  storageBucket: \"adgquiz.appspot.com\",\n  messagingSenderId: \"838063692472\"\n};\nfirebase.initializeApp(config);\n\nconst firebaseUser = firebase.database().ref(`players`);\nconst firebaseRef = firebase.database().ref();\nconst database = firebase.database();\nconst firebaseQuestions = firebase.database().ref(`question`);\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    \n\n    this.state = { \n      loadingSignUp: false,\n      registered: false,\n      loggedIn: false,\n      teamName: '',\n      password: '',\n      participantName: ''\n     }\n  }\n\n\n\n\n  renderRegisterOrQuiz(){\n    if(this.state.loggedIn)\n    return(\n      <div> <QuizConsole teamName={this.state.teamName} participantName={this.state.participantName} database={database} user={firebaseUser} firebaseRef={firebaseRef} questions={firebaseQuestions}/></div>\n     \n    )\n\n    return(\n      <form  id=\"regDeco\" className =\"register\" onSubmit={this.onPressRegisterButton.bind(this)} autoComplete=\"off\">\n      <div className=\"text-center\">\n        <img src={Logo} alt=\"logo\" id=\"reglogo\"></img>\n        <h1>Quiz</h1>\n      </div>\n          {this.register()}\n      </form>\n    )\n  }\n\n  teamNameOnChange(event){\n    this.setState({ teamName: event.target.value,\n                    loadingSignUp: true});\n    firebaseUser.once('value', (snapshot)=> {\n      let players = Object.keys(snapshot.val());\n        let userCheck = players.includes(this.state.teamName);\n        this.setState({loadingSignUp: false})\n       if (userCheck)\n       this.setState({registered: true})\n       else\n       this.setState({registered: false})\n    })\n    \n  }\n\n  participantNameOnChange(event){\n    this.setState({participantName: event.target.value});\n  }\n\n  passwordOnChange(event){\n  \n    this.setState({ password: document.getElementById(\"password\").value});\n    \n\n  }\n\n  onPressRegisterButton=(event)=>{\n    event.preventDefault();\n    this.setState({\n      teamName: document.getElementById(\"TeamName\").value,\n      password: document.getElementById(\"password\").value,\n    })\n    if(this.state.registered===false)\n    {\n      firebaseUser.child(this.state.teamName).set({\n        password: this.state.password,\n        score: 0,\n        counter: 0,\n      });\n      this.setState({registered: true})\n    }\n    else{\n      let finPass = this.state.password;\n      let pass='';\n      let firebasePassCheck = firebase.database().ref(`players/${this.state.teamName}`);\n    firebasePassCheck.once('value', (snapshot)=> {\n      pass= snapshot.val().password;\n\n      if(finPass===pass)\n      {\n        this.setState({\n          loggedIn: true,\n        })\n      }\n    });\n    \n    }\n  }\n\n  loginOrRegister(){\n    \n    if(this.state.registered===false)\n    return(\n      <div>\n      <input type=\"password\" id=\"password\" className=\"\" name=\"login\" placeholder=\"password\" value={this.state.password} onChange={this.passwordOnChange.bind(this)} required/>      \n      <br/>\n      <input className=\"btn btn-primary\" id=\"rButton\" type=\"submit\" value=\"Register\"/>\n      </div>\n    )\n\n    return(\n      <div>\n      <input type=\"password\" id=\"password\" className=\"\" name=\"login\" placeholder=\"password\" value={this.state.password} onChange={this.passwordOnChange.bind(this)} required/>\n      <p style={{color: 'blue'}}>Registered</p>      \n      <br/>\n      <input className=\"btn btn-primary\" id=\"rButton\" type=\"submit\" value=\"Log In\"/>\n      </div>\n    )\n  }\n\n  spinner(){\n    if(this.state.loadingSignUp)\n    return(\n      <Loader\n         type=\"TailSpin\"\n         color=\"#00BFFF\"\n         height=\"55\"\t\n         width=\"55\"\n      /> \n    )\n  }\n\n  register(){\n    return(\n      <div className=\"registerCard container\">\n      <input type=\"text\" id=\"TeamName\" className=\"\" name=\"login\" placeholder=\"Team Name\" value={this.state.teamName + ''} autoComplete=\"off\" onChange={this.teamNameOnChange.bind(this)} required/>\n      {this.loginOrRegister()}\n      </div>\n    )\n  }\n\n  render() { \n    return ( \n      <div className=\"App \" >\n      {this.renderRegisterOrQuiz()}\n<br/>\n<br/>\n<br/>\n<div id=\"loader\" className=\"text-center\">{this.spinner()}</div>\n      </div>\n     );\n  }\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hackgridLogo.a80bfdd5.png\";","module.exports = __webpack_public_path__ + \"static/media/Logo.182b63bb.png\";","module.exports = __webpack_public_path__ + \"static/media/quiz.eca3a5d8.png\";"],"sourceRoot":""}